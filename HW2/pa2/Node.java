package pa2;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.util.*;
import java.lang.Integer;

public class Node extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		Node instance = (Node)new Node(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new Node(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Node.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Node(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Node.getReferenceByLocation(new UAL(ual)); }
	public Node(boolean o, UAN __uan)	{ super(false,__uan); }
	public Node(boolean o, UAL __ual)	{ super(false,__ual); }
	public Node(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public Node(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public Node(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public Node()		{  }
	public Node(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "pa2.Node", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct (int id, int nNum, Main mn) {
		Object[] __arguments = { new Integer(id), new Integer(nNum), mn };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public Node self;
		public void updateSelf(ActorReference actorReference) {
			((Node)actorReference).setUAL(getUAL());
			((Node)actorReference).setUAN(getUAN());
			self = new Node(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "pa2.Node$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		List connections;
		List connectionIds;
		Map data;
		Map unresolvedQueries;
		int nodeId = 0, n = 0;
		Main mainNode;
		int max;
		boolean isDebug = true;
		void construct(int id, int nNum, Main mn){
			nodeId = id;
			n = nNum;
			mainNode = mn;
			max = (int)Math.pow(2, n);
			connections = new ArrayList();
			connectionIds = new ArrayList();
			data = new HashMap();
			unresolvedQueries = new HashMap();
		}
		public void addConnection(Node nd, int ndId) {
			if (isDebug) {{
				Token connId = new Token("connId");
				Token str = new Token("str");
				{
					// token connId = nd<-getNodeId()
					{
						Object _arguments[] = {  };
						Message message = new Message( self, nd, "getNodeId", _arguments, null, connId );
						__messages.add( message );
					}
					// token str = printAddConnection(connId)
					{
						Object _arguments[] = { connId };
						Message message = new Message( self, self, "printAddConnection", _arguments, connId, str );
						__messages.add( message );
					}
					// standardOutput<-println(str)
					{
						Object _arguments[] = { str };
						Message message = new Message( self, standardOutput, "println", _arguments, str, null );
						__messages.add( message );
					}
				}
			}
}			connections.add(nd);
			connectionIds.add(ndId);
		}
		public String printAddConnection(int connId) {
			return "Node "+nodeId+" adding connection to node "+connId;
		}
		public void printId() {
			if (isDebug) {			{
				// standardOutput<-println(nodeId)
				{
					Object _arguments[] = { nodeId };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
}		}
		public int getNodeId() {
			return nodeId;
		}
		public void dealWithQuery(int qId, int nId, String key) {
			if (isDebug) {{
				{
					// standardOutput<-println("------------------\n"+"Query:\n"+"From Node: "+nodeId+"\nTo Node: "+nId+"\nQueryId: "+qId+"\nKey: "+key+"\n------------------\n")
					{
						Object _arguments[] = { "------------------\n"+"Query:\n"+"From Node: "+nodeId+"\nTo Node: "+nId+"\nQueryId: "+qId+"\nKey: "+key+"\n------------------\n" };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
}			if (nId==nodeId) {{
				if (data.containsKey(key)) {{
					{
						// mainNode<-queryResponse(qId, nodeId, data.get(key))
						{
							Object _arguments[] = { qId, nodeId, data.get(key) };
							Message message = new Message( self, mainNode, "queryResponse", _arguments, null, null );
							__messages.add( message );
						}
					}
				}
}				else {{
					if (!unresolvedQueries.containsKey(key)) {{
						List nUnresolvedQueryList = new ArrayList();
						nUnresolvedQueryList.add(qId);
						unresolvedQueries.put(key, nUnresolvedQueryList);
					}
}					else {{
						List unresolvedQueryList = (List)unresolvedQueries.get(key);
						unresolvedQueryList.add(qId);
						unresolvedQueries.replace(key, unresolvedQueryList);
					}
}				}
}			}
}			else {{
				{
					Token token_3_0 = new Token();
					// findNextNode(nId)
					{
						Object _arguments[] = { nId };
						Message message = new Message( self, self, "findNextNode", _arguments, null, token_3_0 );
						__messages.add( message );
					}
					// sendQuery(token, qId, nId, key)
					{
						Object _arguments[] = { token_3_0, qId, nId, key };
						Message message = new Message( self, self, "sendQuery", _arguments, token_3_0, null );
						__messages.add( message );
					}
				}
			}
}		}
		public void dealWithInsert(int nId, String k, String v) {
			if (isDebug) {{
				{
					// standardOutput<-println("------------------\n"+"Insert:\n"+"From Node: "+nodeId+"\nTo Node: "+nId+"\nKey: "+k+"\nValue: "+v+"\n------------------\n")
					{
						Object _arguments[] = { "------------------\n"+"Insert:\n"+"From Node: "+nodeId+"\nTo Node: "+nId+"\nKey: "+k+"\nValue: "+v+"\n------------------\n" };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
}			if (nId==nodeId) {{
				data.put(k, v);
				if (unresolvedQueries.containsKey(k)) {{
					List q = (List)unresolvedQueries.get(k);
					for (int i = 0; i<q.size(); i++){
						int qId = (int)q.get(i);
						{
							// mainNode<-queryResponse(qId, nodeId, v)
							{
								Object _arguments[] = { qId, nodeId, v };
								Message message = new Message( self, mainNode, "queryResponse", _arguments, null, null );
								__messages.add( message );
							}
						}
					}
				}
}			}
}			else {{
				{
					Token token_3_0 = new Token();
					// findNextNode(nId)
					{
						Object _arguments[] = { nId };
						Message message = new Message( self, self, "findNextNode", _arguments, null, token_3_0 );
						__messages.add( message );
					}
					// sendInsert(token, nId, k, v)
					{
						Object _arguments[] = { token_3_0, nId, k, v };
						Message message = new Message( self, self, "sendInsert", _arguments, token_3_0, null );
						__messages.add( message );
					}
				}
			}
}		}
		public Node findNextNode(int nId) {
			int pDist = max, nDist = max;
			int pNode = 0, nNode = 0;
			for (int i = 0; i<connectionIds.size(); i++){
				int cId = (int)connectionIds.get(i);
				int dist = nId-cId;
				if (dist>=0&&dist<pDist) {{
					pDist = dist;
					pNode = i;
				}
}				else {if (dist<0&&dist<nDist) {{
					nDist = dist;
					nNode = i;
				}
}}			}
			if (pDist<max) {{
				return (Node)connections.get(pNode);
			}
}			return (Node)connections.get(nNode);
		}
		public void sendQuery(Node nd, int qId, int nId, String key) {
			{
				// nd<-dealWithQuery(qId, nId, key)
				{
					Object _arguments[] = { qId, nId, key };
					Message message = new Message( self, nd, "dealWithQuery", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void sendInsert(Node nd, int nId, String k, String v) {
			{
				// nd<-dealWithInsert(nId, k, v)
				{
					Object _arguments[] = { nId, k, v };
					Message message = new Message( self, nd, "dealWithInsert", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
	}
}